{"version":3,"sources":["common.js","actions/todoActions.js","actions/index.js","components/TodoForm.js","components/TodoItem.js","components/TodoList.js","components/TodoApp.js","components/AppNavbar.js","reducers/todoReducer.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["fieldSorter","fields","a","b","map","o","dir","substring","reduce","p","n","apiEndpoint","saveTodoUrl","getTodosUrl","getTodos","dispatch","console","log","data","username","axios","post","result","todoItems","sort","payload","relativeTimes","getRelativeTimes","type","error","Promise","reject","description","when","moment","add","fromNow","value","toISOString","endOf","allActions","todoActions","saveTodo","todoItem","TodoForm","useForm","register","handleSubmit","reset","useDispatch","onSubmit","formData","todoId","uuidv4","createdDate","Date","todoState","dueDate","InputGroup","className","FormControl","placeholder","ref","name","required","Form","Control","as","defaultValue","item","key","Append","Button","variant","TodoItem","nowISO","id","checked","data-keeper-edited","onChange","e","htmlFor","Badge","style","color","margin","padding","onClick","TodoList","useEffect","fetchData","ListGroup","Item","TodoApp","useSelector","state","todoReducer","todos","AppNavbar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","action","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f0036cd.chunk.js","sourcesContent":["export const fieldSorter = (fields) => (a, b) =>\n  fields\n    .map((o) => {\n      let dir = 1;\n      if (o[0] === \"-\") {\n        dir = -1;\n        o = o.substring(1);\n      }\n      return a[o] > b[o] ? dir : a[o] < b[o] ? -dir : 0;\n    })\n    .reduce((p, n) => (p ? p : n), 0);\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport { fieldSorter } from \"../common\";\nconst apiEndpoint = \"https://n3uy6lkc7a.execute-api.us-west-2.amazonaws.com/prod\";\nconst saveTodoUrl = `${apiEndpoint}/savetodos`;\nconst getTodosUrl = `${apiEndpoint}/gettodos`;\n\nconst getTodos = () => {\n  return async (dispatch) => {\n    try {\n      console.log(\"getting data...\");\n      const data = {\n        username: \"brandonv\",\n      };\n      const result = await axios.post(getTodosUrl, data);\n      const todoItems = result.data.sort(fieldSorter([\"-todoState\", \"dueDate\"]));\n      const payload = {\n        todoItems,\n        relativeTimes: getRelativeTimes(),\n      };\n      return dispatch({\n        type: \"GET_TODOS\",\n        payload,\n      });\n    } catch (error) {\n      console.error(error);\n      return Promise.reject(\"There was an error getting the todos from the API.\");\n    }\n  };\n};\n\nconst saveTodo = (todoItem) => {\n  return async (dispatch) => {\n    try {\n      await axios.post(saveTodoUrl, todoItem);\n      return dispatch(getTodos());\n    } catch (error) {\n      console.error(error);\n      return Promise.reject(\"There was an error saving the todo to the API.\");\n    }\n  };\n};\n\nconst getRelativeTimes = () => {\n  const relativeTimes = [\n    {\n      description: \"Now (ish)...\",\n      when: moment().add(1, \"hours\").fromNow(),\n      value: moment().add(1, \"hours\").toISOString(),\n    },\n    {\n      description: \"Today...\",\n      when: moment().endOf(\"day\").fromNow(),\n      value: moment().endOf(\"day\").toISOString(),\n    },\n    {\n      description: \"Tomorrow...\",\n      when: moment().add(1, \"days\").fromNow(),\n      value: moment().add(1, \"days\").toISOString(),\n    },\n    {\n      description: \"This week...\",\n      when: moment().add(3, \"days\").fromNow(),\n      value: moment().add(3, \"days\").toISOString(),\n    },\n    {\n      description: \"Next week...\",\n      when: moment().add(7, \"days\").fromNow(),\n      value: moment().add(7, \"days\").toISOString(),\n    },\n  ];\n  return relativeTimes;\n};\n\nexport default {\n  getTodos,\n  saveTodo,\n};\n","import todoActions from \"./todoActions\";\n\nconst allActions = {\n  todoActions,\n};\n\nexport default allActions;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Form, Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport allActions from \"../actions\";\n\n/**\n * TodoForm\n * @description Form for adding new Todo items.\n */\nexport default function TodoForm({ relativeTimes }) {\n  const { register, handleSubmit, reset } = useForm();\n  const dispatch = useDispatch();\n  const onSubmit = async (formData) => {\n    const todoItem = {\n      username: \"brandonv\",\n      todoId: uuidv4(),\n      createdDate: new Date().toISOString(),\n      description: formData.description,\n      todoState: \"pending\",\n      dueDate: formData.dueDate,\n    };\n    dispatch(allActions.todoActions.saveTodo(todoItem));\n    reset();\n  };\n  return (\n    <div>\n      <h1>Todo...</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"What do you need to do?\"\n            ref={register}\n            name=\"description\"\n            required\n          />\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <Form.Control name=\"dueDate\" as=\"select\" defaultValue=\"\" ref={register} required>\n            <option value=\"\">When does it need to be done?</option>\n            {relativeTimes.map((item) => (\n              <option key={item.value} value={item.value}>\n                {item.description} {item.when}\n              </option>\n            ))}\n          </Form.Control>\n          <InputGroup.Append>\n            <Button type=\"submit\" variant=\"info\">\n              do it &nbsp; :)\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Badge } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport allActions from \"../actions\";\n\n/**\n * TodoItem\n * @description This class is the todo item in the list.\n */\nexport default function TodoItem({ item }) {\n  const dispatch = useDispatch();\n  const nowISO = new Date().toISOString();\n  return (\n    <>\n      <div>\n        <div className=\"form-check\">\n          <input\n            type=\"checkbox\"\n            id={item.todoId}\n            className=\"form-check-input\"\n            checked={item.todoState === \"done\"}\n            data-keeper-edited=\"yes\"\n            onChange={(e) => {\n              if (item.todoState === \"pending\") {\n                item.todoState = \"done\";\n              } else {\n                item.todoState = \"pending\";\n              }\n              dispatch(allActions.todoActions.saveTodo(item));\n            }}\n          />\n          <label htmlFor={item.todoId} className={item.todoState === \"done\" ? \"line-through\" : \"\"}>\n            {nowISO > item.dueDate && item.todoState !== \"done\" && (\n              <span>\n                <Badge variant=\"danger\">git-er-done</Badge>\n                &nbsp;&nbsp;\n              </span>\n            )}\n            {item.description}\n          </label>\n        </div>\n        <div className={item.todoState === \"done\" ? \"line-through\" : \"\"}>\n          <span style={{ color: \"lightblue\" }}>Created</span> {moment(item.createdDate).fromNow()}\n          {\", \"}\n          <span style={{ color: \"lightblue\" }}>due</span> {moment(item.dueDate).fromNow()}.\n        </div>\n      </div>\n      <div>\n        <Button\n          style={{ margin: \"0px\", padding: \"0px\" }}\n          variant=\"link\"\n          onClick={(e) => {\n            item.todoState = \"archived\";\n            dispatch(allActions.todoActions.saveTodo(item));\n          }}\n        >\n          archive\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ListGroup } from \"react-bootstrap\";\nimport allActions from \"../actions\";\nimport TodoItem from \"./TodoItem\";\n\n/**\n * TodoList\n * @description This class is the list component of the TodoList application.\n */\nexport default function TodoList({ todoItems }) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch(allActions.todoActions.getTodos());\n    };\n    fetchData();\n  }, [dispatch]);\n  return (\n    <ListGroup variant=\"flush\">\n      {todoItems.map((item) => (\n        <ListGroup.Item key={item.todoId}>\n          <TodoItem item={item} />\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TodoForm from \"./TodoForm\";\nimport TodoList from \"./TodoList\";\n\n/**\n * TodoApp()\n */\nfunction TodoApp() {\n  const relativeTimes = useSelector((state) => state.todoReducer.relativeTimes);\n  const todoItems = useSelector((state) => state.todoReducer.todos);\n  return (\n    <>\n      <TodoForm relativeTimes={relativeTimes} />\n      <TodoList todoItems={todoItems} />\n    </>\n  );\n}\n\nexport default TodoApp;\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\n/**\n * Navbar()\n */\nexport function AppNavbar() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">\n        Todo... <a href=\"\">...a portfolio application</a>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    </Navbar>\n  );\n}\n","const todoReducer = (state = { todos: [], relativeTimes: [] }, action) => {\n  //   console.log(state, action);\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return {\n        ...state,\n        todos: action.payload.todoItems,\n        relativeTimes: action.payload.relativeTimes,\n      };\n    case \"SAVE_TODO\":\n      return {\n        ...state,\n        todos: action.payload.todoItems,\n        relativeTimes: action.payload.relativeTimes,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import todoReducer from \"./todoReducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  todoReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport TodoApp from \"./components/TodoApp\";\nimport { Container } from \"react-bootstrap\";\nimport { AppNavbar } from \"./components/AppNavbar\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n// const store = createStore(rootReducer, compose(applyMiddleware(thunk)));\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk)));\n\n/**\n * App()\n */\nfunction App() {\n  return (\n    <>\n      <Provider store={store}>\n        <AppNavbar />\n        <Container>\n          <TodoApp />\n        </Container>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}